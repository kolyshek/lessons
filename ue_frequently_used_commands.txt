Macros:
	UCLASS()
	USTRUCT()
	GENERATED_BODY()
	UPROPERTY()
	UFUNCTION()
	TEXT()
	UE_LOG()
	LOCTEXT()
	NSLOCTEXT()
	WITH_EDITOR
Core:
	Actor(A):
	Enums(E):
	Other(F):
		FString
			.Printf()
		FText
		FName
		FVector
			.X
			.Y
			.Z
		FRotator
			.Pitch
			.Yaw
			.Roll
		FMath
			::Sin()
	Interface(I):
	SWidget(S):
	Template(T):
		TChar
			.ToLower()
		TCHAR
		TArray
			.Num()
			.Add()
			.AddUnique()
			.Remove()
			.RemoveAt()
			.RemoveAtSwap()
			.Empty()
		TMap
			.Key
			.Value
			.Contains()
			.Add()
			.Remove()
			.Empty()
		TSet
			.Num()
			.Add()
			.Contains()
			.Remove()
			.Empty()
			.Array()
			.CreateIterator()
	Object(U):
		UStructs
	int8/uint8
	int16/uint16
	int32/uint32
	int64/uint64
	FIntPoint
	HashCombine()
CoreUObject:
	Actor(A):
	Enums(E):
	Other(F):
		FReferenceCollector
			.AddReferencedObject()
		FGCObject
	Interface(I):
	SWidget(S):
	Template(T):
		TObjectIterator<>
	Object(U):
		UObjectBaseUtility
			.GetName()
	CreateDefaultSubobject<>()
	ConstructorHelpers
		Other(F):
			::FObjectFinder<>
				.Succeeded()
				.Object
	NewObject<>()
Engine:
	Actor(A):
		AActor
			PrimaryActorTick
				.bCanEverTick
			RootComponent
			.BeginPlay()
			.Tick()
			.EndPlay()
			.PostInitProperties()
			.PostEditChangeProperty()
			.GetActorLocation()
			.GetActorRotation()
			.GetGameTimeSinceCreation()
			.SetActorLocationAndRotation()
		APlayerController
		ACharacter
			Variables:
				JumpMaxHoldTime - Максимальное время, в течение которого можно удерживать клавишу перехода.
			Methods:
				.Jump()
				.StopJumping()
		APawn
			Variables:
				bUseControllerRotationPitch - Если true, шаг этой пешки будет обновлен, чтобы соответствовать шагу ControlRotation контроллера, если он контролируется PlayerController.
				bUseControllerRotationYaw - Если true, рыскание этой пешки будет обновлено, чтобы соответствовать рысканью ControlRotation контроллера, если он управляется PlayerController.
				bUseControllerRotationRoll - Если true, результат этой пешки будет обновлен, чтобы соответствовать броску ControlRotation контроллера, если он контролируется PlayerController.
	Enums(E):
	Other(F):
	Interface(I):
	SWidget(S):
	Template(T):
	Object(U):
		UStaticMeshComponent
			.SetupAttachment()
			.SetStaticMesh()
			.SetRelativeLocation()
		UCapsuleComponent
		UWorld
			.GetWorld()
			.SpawnActor()
		UCharacterMovementComponent
			Variables:
				AirControl - При падении персонаж может контролировать боковое движение.
				bOrientRotationToMovement - Если true, поверните Персонаж в направлении ускорения, используя RotationRate в качестве изменения скорости вращения.
				bConstrainToPlane
				bUseFlatBaseForFloorChecks
				GravityScale - Пользовательская шкала силы тяжести. На эту величину умножается гравитация персонажа.
				GroundFriction - Настройка, влияющая на управление движением.
				JumpZVelocity - Начальная скорость (мгновенное вертикальное ускорение) при прыжке.
				MaxWalkSpeed - Максимальная путевая скорость при ходьбе. Также определяет максимальную боковую скорость при падении.
				MaxFlySpeed
				RotationRate - Изменение скорости вращения в секунду, используется, когда UseControllerDesiredRotation или OrientRotationToMovement имеют значение true.
			Methods:
				.SetPlaneConstraintNormal()
		UInputComponent
			Methods:
				.BindAction()
				.BindTouch()